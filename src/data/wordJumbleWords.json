[
  {"word": "function", "hint": "Defines a reusable block of code"},
  {"word": "integer", "hint": "A whole number data type"},
  {"word": "dictionary", "hint": "Key-value mapping"},
  {"word": "object", "hint": "Instance of a class"},
  {"word": "loop", "hint": "Repeats code block"},
  {"word": "import", "hint": "Brings in modules or objects"},
  {"word": "append", "hint": "Adds item to end of list"},
  {"word": "method", "hint": "Function associated with an object"},
  {"word": "attribute", "hint": "Property of an object"},
  {"word": "exception", "hint": "An error that occurs during execution"},
  {"word": "try", "hint": "Block to catch exceptions"},
  {"word": "except", "hint": "Handles exceptions"},
  {"word": "finally", "hint": "Block that always executes after try/except"},
  {"word": "python", "hint": "A programming language named after a snake"},
  {"word": "github", "hint": "A web-based platform for version control"},
  {"word": "git", "hint": "A distributed version control system"},
  {"word": ".append()", "hint": "To add an element to the end of a list"},
  {"word": ".insert()", "hint": "To add an element at a specific index in a list"},
  {"word": ".remove()", "hint": "To delete an element from a list"},
  {"word": ".pop()", "hint": "To remove and return the last element from a list"},
  {"word": "index", "hint": "The position of an element in a list"},
  {"word": "slice", "hint": "A portion of a list defined by a range of indices"},
  {"word": ".index()", "hint": "To find the position of an element in a list"},
  {"word": "list", "hint": "A collection of items in a specific order"},
  {"word": "tuple", "hint": "An immutable collection of items"},
  {"word": "set", "hint": "An ordered collection of unique items"},
  {"word": "print()", "hint": "A function that displays output to the console"},
  {"word": "input()", "hint": "A function that takes user input"},
  {"word": "type()", "hint": "A function that returns the type of an object"},
  {"word": "len()", "hint": "A function that returns the length of an object"},
  {"word": "range()", "hint": "A function that generates a sequence of numbers"},
  {"word": "for_loop", "hint": "A control flow statement for specifying iteration"},
  {"word": "while_loop", "hint": "A control flow statement that allows code to be executed repeatedly"},
  {"word": "if_statement", "hint": "A control flow statement that executes code based on a condition"},
  {"word": "else_statement", "hint": "A control flow statement that executes code if the condition of an if statement is false"},
  {"word": "elif_statement", "hint": "A control flow statement that executes code if the condition of an if statement is false and its own condition is true"},
  {"word": "int", "hint": "A data type that represents whole numbers"},
  {"word": "float", "hint": "A data type that represents decimal numbers"},
  {"word": "string", "hint": "A data type that represents text"},
  {"word": "boolean", "hint": "A data type that represents True or False values"},
  {"word": "casting", "hint": "Converting a variable from one data type to another"},
  {"word": "variable", "hint": "A named storage location for data"},
  {"word": "int()", "hint": "A function that converts a value to an integer"},
  {"word": "float()", "hint": "A function that converts a value to a float"},
  {"word": "str()", "hint": "A function that converts a value to a string"},
  {"word": "bool()", "hint": "A function that converts a value to a boolean"},
  {"word": "list()", "hint": "A function that converts a value to a list"},
  {"word": "tuple()", "hint": "A function that converts a value to a tuple"},
  {"word": "None", "hint": "A special value in Python that represents the absence of a value"},
  {"word": "True", "hint": "A boolean value that represents true"},
  {"word": "False", "hint": "A boolean value that represents false"},
  {"word": "and", "hint": "A logical operator that returns True if both statements are true"},
  {"word": "or", "hint": "A logical operator that returns True if one of the statements is true"},
  {"word": "not", "hint": "A logical operator that returns the opposite of the statement"},
  {"word": "if", "hint": "A keyword that starts a conditional statement"},
  {"word": "else", "hint": "A keyword that executes code if the condition of an if statement is false"},
  {"word": "elif", "hint": "A keyword that executes code if the condition of an if statement is false and its own condition is true"},
  {"word": "while", "hint": "A keyword that starts a while loop"},
  {"word": "for", "hint": "A keyword that starts a for loop"},
  {"word": "def", "hint": "A keyword that defines a function"},
  {"word": "return", "hint": "A keyword that returns a value from a function"},
  {"word": "class", "hint": "A keyword that defines a class"},
  {"word": "self", "hint": "A reference to the current instance of a class"},
  {"word": "__init__", "hint": "A special method that initializes a new object"},
  {"word": "__str__", "hint": "A special method that defines the string representation of an object"},
  {"word": "__repr__", "hint": "A special method that defines the official string representation of an object"},
  {"word": "__len__", "hint": "A special method that defines the behavior of the len() function"},
  {"word": "__iter__", "hint": "A special method that returns an iterator object"},
  {"word": "__next__", "hint": "A special method that returns the next item from an iterator"},
  {"word": "__contains__", "hint": "A special method that checks if a value is in a collection"},
  {"word": "__call__", "hint": "A special method that allows an object to be called as a function"},
  {"word": "__eq__", "hint": "A special method that defines equality comparison"},
  {"word": "__ne__", "hint": "A special method that defines inequality comparison"},
  {"word": "__lt__", "hint": "A special method that defines less than comparison"},
  {"word": "__le__", "hint": "A special method that defines less than or equal to comparison"},
  {"word": "__gt__", "hint": "A special method that defines greater than comparison"},
  {"word": "__ge__", "hint": "A special method that defines greater than or equal to comparison"},
  {"word": "__add__", "hint": "A special method that defines addition"},
  {"word": "__sub__", "hint": "A special method that defines subtraction"},
  {"word": "__mul__", "hint": "A special method that defines multiplication"},
  {"word": "__truediv__", "hint": "A special method that defines true division"},
  {"word": "__floordiv__", "hint": "A special method that defines floor division"},
  {"word": "__mod__", "hint": "A special method that defines modulus operation"},
  {"word": "__pow__", "hint": "A special method that defines exponentiation"},
  {"word": "future_annotations", "hint": "A feature that allows for postponed evaluation of type annotations"},
  {"word": "iterable", "hint": "An object that can return its members one at a time"},
  {"word": "bisect_module", "hint": "A module that provides support for maintaining a list in sorted order without having to sort the list after each insertion"},
  {"word": "iterator", "hint": "An object that implements the iterator protocol, consisting of __iter__() and __next__() methods"},
  {"word": "merge_sort", "hint": "A sorting algorithm that divides the array into halves, sorts them, and merges them back together"},
  {"word": "insertion_sort", "hint": "A sorting algorithm that builds a sorted array one element at a time"},
  {"word": "selection_sort", "hint": "A sorting algorithm that divides the input into a sorted and an unsorted region"},
  {"word": "quick_sort", "hint": "A sorting algorithm that selects a 'pivot' element and partitions the other elements into two sub-arrays"},
  {"word": "binary_search", "hint": "A search algorithm that finds the position of a target value within a sorted array"},
  {"word": "linear_search", "hint": "A search algorithm that checks each element in the list until the desired element is found"},
  {"word": "stack", "hint": "A data structure that follows the Last In First Out (LIFO) principle"},
  {"word": "queue", "hint": "A data structure that follows the First In First Out (FIFO) principle"},
  {"word": "pandas", "hint": "A powerful data manipulation and analysis library for Python"},
  {"word": "numpy", "hint": "A library for numerical computations in Python"},
  {"word": "matplotlib", "hint": "A plotting library for creating static, animated, and interactive visualizations in Python"},
  {"word": ".plot()", "hint": "A method in matplotlib for creating a plot"},
  {"word": ".show()", "hint": "A method in matplotlib to display the plot"},
  {"word": ".read_csv()", "hint": "A pandas method to read a CSV file into a DataFrame"},
  {"word": ".to_csv()", "hint": "A pandas method to write a DataFrame to a CSV file"},
  {"word": ".groupby()", "hint": "A pandas method to group data by one or more columns"},
  {"word": ".merge()", "hint": "A pandas method to combine two DataFrames based on a common column"},
  {"word": ".concat()", "hint": "A pandas method to concatenate two or more DataFrames"},
  {"word": ".pivot_table()", "hint": "A pandas method to create a pivot table from a DataFrame"},
  {"word": ".dropna()", "hint": "A pandas method to remove missing values from a DataFrame"},
  {"word": ".fillna()", "hint": "A pandas method to fill missing values in a DataFrame"},
  {"word": ".map()", "hint": "A pandas method to map values of a Series according to an input mapping or function"},
  {"word": ".filter()", "hint": "A pandas method to filter data based on a condition"},
  {"word": ".sort_values()", "hint": "A pandas method to sort a DataFrame by one or more columns"},
  {"word": ".iloc[]", "hint": "A pandas method for integer-location based indexing"},
  {"word": ".loc[]", "hint": "A pandas method for label-based indexing"},
  {"word": ".at[]", "hint": "A pandas method for accessing a single value for a row/column label pair"},
  {"word": ".iat[]", "hint": "A pandas method for accessing a single value for a row/column pair by integer position"},
  {"word": ".head()", "hint": "A pandas method to return the first n rows of a DataFrame"},
  {"word": ".tail()", "hint": "A pandas method to return the last n rows of a DataFrame"},
  {"word": ".describe()", "hint": "A pandas method to generate descriptive statistics"},
  {"word": ".info()", "hint": "A pandas method to get a concise summary of a DataFrame"},
  {"word": ".shape", "hint": "An attribute that returns the dimensions of a DataFrame"},
  {"word": ".columns", "hint": "An attribute that returns the column labels of a DataFrame"},
  {"word": ".index", "hint": "An attribute that returns the index labels of a DataFrame"},
  {"word": ".values", "hint": "An attribute that returns the data as a NumPy array"},
  {"word": "big-O_notation", "hint": "A mathematical notation used to describe the performance or complexity of an algorithm"},
  {"word": "time_complexity", "hint": "The computational complexity that describes the amount of time it takes to run an algorithm"},
  {"word": "space_complexity", "hint": "The computational complexity that describes the amount of memory space required by an algorithm"},
  {"word": "O(1)", "hint": "Constant time complexity"},
  {"word": "O(n)", "hint": "Linear time complexity"},
  {"word": "O(logn)", "hint": "Logarithmic time complexity"},
  {"word": "O(n^2)", "hint": "Quadratic time complexity"},
  {"word": "O(nlogn)", "hint": "Linearithmic time complexity"},
  {"word": "recursion", "hint": "A method of solving a problem where the solution depends on solutions to smaller instances of the same problem"},
  {"word": "JSON", "hint": "JavaScript Object Notation, a lightweight data interchange format"},
  {"word": ".dump()", "hint": "A method to serialize a Python object into a JSON formatted string"},
  {"word": ".load()", "hint": "A method to deserialize a JSON formatted string into a Python object"},
  {"word": "polymorphism", "hint": "The ability of different objects to be accessed through the same interface"},
  {"word": "inheritance", "hint": "A mechanism where a new class can inherit properties and methods from an existing class"},
  {"word": "encapsulation", "hint": "The bundling of data with the methods that operate on that data"},
  {"word": "__private_variable", "hint": "A convention to indicate that a variable is intended for internal use only"},
  {"word": "__private_method", "hint": "A convention to indicate that a method is intended for internal use only"},
  {"word": "_protected_variable", "hint": "A convention to indicate that a variable is intended for use within the class and its subclasses"},
  {"word": "_protected_method", "hint": "A convention to indicate that a method is intended for use within the class and its subclasses"},
  {"word": "total_ordering", "hint": "A class decorator that fills in missing ordering methods"},
  {"word": "pointer", "hint": "A variable that stores the memory address of another variable"}
]