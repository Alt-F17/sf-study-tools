[
  {"front": "What does 'def' keyword do?", "back": "Defines a function."},
  {"front": "What is '==' used for?", "back": "Checks for equality of value."},
  {"front": "What is 'is' used for?", "back": "Checks for identity (same object in memory)."},
  {"front": "What is a list?", "back": "An ordered, mutable sequence of items."},
  {"front": "What is a tuple?", "back": "An ordered, immutable sequence of items."},
  {"front": "What is a dictionary?", "back": "An unordered collection of key-value pairs."},
  {"front": "Common method to add to a list?", "back": ".append()"},
  {"front": "How to get a value from a dictionary?", "back": "Using its key, e.g., my_dict['key']"},
  {"front": "What does the 'pass' statement do?", "back": "Acts as a placeholder, does nothing."},
  {"front": "What is `__init__` in a class?", "back": "The constructor method, called when creating an object."},
  {"front": "What is a function in Python?", "back": "A reusable block of code that performs a specific task."},
  {"front": "How do you define a function in Python?", "back": "Using the 'def' keyword followed by the function name and parentheses."},
  {"front": "What is an integer in Python?", "back": "A whole number data type."},
  {"front": "How do you assign an integer value to a variable in Python?", "back": "By using the assignment operator, e.g., x = 5"},
  {"front": "What is a dictionary in Python?", "back": "A collection of key-value pairs."},
  {"front": "How do you access a value in a dictionary?", "back": "Using its key, e.g., my_dict['key']"},
  {"front": "What is an object in Python?", "back": "An instance of a class."},
  {"front": "How do you create an object in Python?", "back": "By calling the class name followed by parentheses, e.g., my_object = MyClass()"},
  {"front": "What is a loop in Python?", "back": "A control structure that repeats a block of code."},
  {"front": "What are the two main types of loops in Python?", "back": "For loops and while loops."},
  {"front": "What does the 'import' keyword do in Python?", "back": "It brings in modules or objects from other modules."},
  {"front": "How do you import a specific function from a module?", "back": "Using 'from module import function'."},
  {"front": "What does the .append() method do?", "back": "Adds an item to the end of a list."},
  {"front": "How do you use .append() on a list?", "back": "By calling my_list.append(item)."},
  {"front": "What is a method in Python?", "back": "A function associated with an object."},
  {"front": "How do you call a method on an object?", "back": "Using the dot notation, e.g., my_object.my_method()"},
  {"front": "What is an attribute in Python?", "back": "A property of an object, often a variable."},
  {"front": "How do you access an attribute of an object?", "back": "Using the dot notation, e.g., my_object.my_attribute"},
  {"front": "What is an exception in Python?", "back": "An error that occurs during execution."},
  {"front": "How do you handle exceptions in Python?", "back": "Using try-except blocks."},
  {"front": "What is the purpose of a try block?", "back": "To enclose code that might raise an exception."},
  {"front": "What follows a try block?", "back": "An except block to handle exceptions."},
  {"front": "What does the except block do?", "back": "It handles exceptions raised in the try block."},
  {"front": "Can you have multiple except blocks?", "back": "Yes, to handle different types of exceptions."},
  {"front": "What is the finally block used for?", "back": "It executes code regardless of whether an exception was raised or not."},
  {"front": "When is the finally block executed?", "back": "After the try and except blocks, always."},
  {"front": "What is Python?", "back": "A high-level, interpreted programming language."},
  {"front": "Is Python named after a snake?", "back": "No, it's named after the Monty Python comedy group. I know, exactly what you'll need at the final :)"},
  {"front": "What is GitHub?", "back": "A web-based platform for version control using Git."},
  {"front": "What is the primary use of GitHub?", "back": "To host and manage Git repositories."},
  {"front": "What is Git?", "back": "A distributed version control system."},
  {"front": "What does Git help with?", "back": "Tracking changes in source code during software development."},
  {"front": "What happens when you use .append() on a list?", "back": "It adds the item to the end of the list."},
  {"front": "How does .insert() differ from .append()?", "back": ".insert() adds an item at a specific index, while .append() adds to the end."},
  {"front": "What does .remove() do to a list?", "back": "It deletes the first occurrence of the specified item."},
  {"front": "What is the difference between .pop() and .remove()?", "back": ".pop() removes and returns an item by index, while .remove() removes by value."},
  {"front": "What is an index in a list?", "back": "The position of an element, starting from 0."},
  {"front": "What is slicing in Python?", "back": "Extracting a portion of a list or string using indices."},
  {"front": "How do you find the index of an item in a list?", "back": "Using the .index() method, e.g., my_list.index(item)"},
  {"front": "What is a list in Python?", "back": "An ordered, mutable collection of items."},
  {"front": "What is a tuple in Python?", "back": "An ordered, immutable collection of items."},
  {"front": "What is a set in Python?", "back": "An unordered collection of unique items."},
  {"front": "What does the print() function do?", "back": "It displays output to the console."},
  {"front": "What is the purpose of input()?", "back": "To take user input from the console."},
  {"front": "What does type() return?", "back": "The type of an object."},
  {"front": "What does len() do?", "back": "It returns the length of an object, like a list or string."},
  {"front": "What is range() used for?", "back": "To generate a sequence of numbers, often used in loops."},
  {"front": "What is a for loop?", "back": "A loop that iterates over a sequence or iterable."},
  {"front": "What is a while loop?", "back": "A loop that continues as long as a condition is true."},
  {"front": "What does an if statement do?", "back": "It executes code based on whether a condition is true."},
  {"front": "What is the purpose of else in an if statement?", "back": "To execute code if the if condition is false."},
  {"front": "What does elif stand for?", "back": "Else if, used for additional conditions in an if statement."},
  {"front": "What is the int data type?", "back": "It represents whole numbers."},
  {"front": "What is a float in Python?", "back": "A data type for decimal numbers."},
  {"front": "What is a string?", "back": "A sequence of characters, used for text."},
  {"front": "What are boolean values in Python?", "back": "True and False, used for logic."},
  {"front": "What is casting in Python?", "back": "Converting a variable from one data type to another."},
  {"front": "What is a variable?", "back": "A named storage location for data."},
  {"front": "What does int() do?", "back": "Converts a value to an integer."},
  {"front": "What is float() used for?", "back": "To convert a value to a float."},
  {"front": "What does str() do?", "back": "Converts a value to a string."},
  {"front": "What is bool()?", "back": "A function that converts a value to a boolean."},
  {"front": "What does list() do?", "back": "Converts an iterable to a list."},
  {"front": "What is tuple() used for?", "back": "To convert an iterable to a tuple."},
  {"front": "What is None in Python?", "back": "A special value representing the absence of a value."},
  {"front": "What is True in Python?", "back": "A boolean value representing true."},
  {"front": "What is False in Python?", "back": "A boolean value representing false."},
  {"front": "What does the 'and' operator do?", "back": "Returns True if both operands are true."},
  {"front": "What is the 'or' operator?", "back": "Returns True if at least one operand is true."},
  {"front": "What does 'not' do in Python?", "back": "Inverts the boolean value."},
  {"front": "How do you start a conditional statement in Python?", "back": "With the 'if' keyword."},
  {"front": "What follows an if statement to handle the false case?", "back": "The 'else' keyword."},
  {"front": "How do you add additional conditions in an if statement?", "back": "Using 'elif'."},
  {"front": "What keyword starts a while loop?", "back": "'while'."},
  {"front": "What keyword is used for a for loop?", "back": "'for'."},
  {"front": "How do you define a function?", "back": "Using the 'def' keyword."},
  {"front": "What does 'return' do in a function?", "back": "It specifies the value to be returned."},
  {"front": "How do you define a class in Python?", "back": "Using the 'class' keyword."},
  {"front": "What is 'self' in a class method?", "back": "A reference to the current instance of the class."},
  {"front": "What is __init__ in a class?", "back": "The constructor method, called when creating an object."},
  {"front": "What does __str__ define?", "back": "The string representation of an object."},
  {"front": "What is __repr__ used for?", "back": "To define the official string representation of an object."},
  {"front": "What does __len__ do?", "back": "Defines the behavior of len() for the object."},
  {"front": "What is __iter__?", "back": "A method that returns an iterator object."},
  {"front": "What does __next__ do?", "back": "Returns the next item from an iterator."},
  {"front": "What is __contains__ used for?", "back": "To check if a value is in a collection."},
  {"front": "What does __call__ allow?", "back": "An object to be called as a function."},
  {"front": "What does __eq__ define?", "back": "Equality comparison for objects."},
  {"front": "What does __ne__ define?", "back": "Inequality comparison for objects."},
  {"front": "What does __lt__ define?", "back": "Less than comparison for objects."},
  {"front": "What does __le__ define?", "back": "Less than or equal to comparison for objects."},
  {"front": "What does __gt__ define?", "back": "Greater than comparison for objects."},
  {"front": "What does __ge__ define?", "back": "Greater than or equal to comparison for objects."},
  {"front": "What does __add__ define?", "back": "Addition for objects."},
  {"front": "What does __sub__ define?", "back": "Subtraction for objects."},
  {"front": "What does __mul__ define?", "back": "Multiplication for objects."},
  {"front": "What does __truediv__ define?", "back": "True division for objects."},
  {"front": "What does __floordiv__ define?", "back": "Floor division for objects."},
  {"front": "What does __mod__ define?", "back": "Modulus operation for objects."},
  {"front": "What does __pow__ define?", "back": "Exponentiation for objects."},
  {"front": "What is future_annotations in Python?", "back": "A feature that allows for postponed evaluation of type annotations."},
  {"front": "What is an iterable in Python?", "back": "An object that can return its members one at a time."},
  {"front": "What does the bisect module provide?", "back": "Support for maintaining a list in sorted order without sorting after each insertion."},
  {"front": "What is an iterator?", "back": "An object that implements __iter__ and __next__ methods."},
  {"front": "What is merge sort?", "back": "A sorting algorithm that divides the array into halves, sorts them, and merges them."},
  {"front": "What is the time complexity of merge sort?", "back": "O(n log n)"},
  {"front": "What is insertion sort?", "back": "A sorting algorithm that builds a sorted array one element at a time."},
  {"front": "What is the time complexity of insertion sort?", "back": "O(n^2)"},
  {"front": "What is selection sort?", "back": "A sorting algorithm that divides the input into a sorted and an unsorted region."},
  {"front": "What is the time complexity of selection sort?", "back": "O(n^2)"},
  {"front": "What is quick sort?", "back": "A sorting algorithm that selects a 'pivot' element and partitions the other elements into two sub-arrays."},
  {"front": "What is the average time complexity of quick sort?", "back": "O(n log n)"},
  {"front": "What is binary search?", "back": "A search algorithm that finds the position of a target value within a sorted array."},
  {"front": "What is the time complexity of binary search?", "back": "O(log n)"},
  {"front": "What is linear search?", "back": "A search algorithm that checks each element in the list until the desired element is found."},
  {"front": "What is the time complexity of linear search?", "back": "O(n)"},
  {"front": "What is a stack?", "back": "A data structure that follows the Last In First Out (LIFO) principle."},
  {"front": "What is a queue?", "back": "A data structure that follows the First In First Out (FIFO) principle."},
  {"front": "What is pandas?", "back": "A library for data manipulation and analysis in Python."},
  {"front": "What is numpy?", "back": "A library for numerical computations in Python."},
  {"front": "What is matplotlib?", "back": "A plotting library for creating visualizations in Python."},
  {"front": "What does .plot() do in matplotlib?", "back": "Creates a plot."},
  {"front": "What is .show() used for in matplotlib?", "back": "To display the plot."},
  {"front": "What does .read_csv() do in pandas?", "back": "Reads a CSV file into a DataFrame."},
  {"front": "What is .to_csv() used for in pandas?", "back": "Writes a DataFrame to a CSV file."},
  {"front": "What does .groupby() do in pandas?", "back": "Groups data by one or more columns."},
  {"front": "What is .merge() used for in pandas?", "back": "Combines two DataFrames based on a common column."},
  {"front": "What does .concat() do in pandas?", "back": "Concatenates two or more DataFrames."},
  {"front": "What is .pivot_table() used for in pandas?", "back": "Creates a pivot table from a DataFrame."},
  {"front": "What does .dropna() do in pandas?", "back": "Removes missing values from a DataFrame."},
  {"front": "What is .fillna() used for in pandas?", "back": "Fills missing values in a DataFrame."},
  {"front": "What does .map() do in pandas?", "back": "Maps values of a Series according to an input mapping or function."},
  {"front": "What is .filter() used for in pandas?", "back": "Filters data based on a condition."},
  {"front": "What does .sort_values() do in pandas?", "back": "Sorts a DataFrame by one or more columns."},
  {"front": "What is .iloc[] used for in pandas?", "back": "Integer-location based indexing."},
  {"front": "What does .loc[] do in pandas?", "back": "Label-based indexing."},
  {"front": "What is .at[] used for in pandas?", "back": "Accesses a single value for a row/column label pair."},
  {"front": "What does .iat[] do in pandas?", "back": "Accesses a single value for a row/column pair by integer position."},
  {"front": "What is .head() used for in pandas?", "back": "Returns the first n rows of a DataFrame."},
  {"front": "What does .tail() do in pandas?", "back": "Returns the last n rows of a DataFrame."},
  {"front": "What is .describe() used for in pandas?", "back": "Generates descriptive statistics."},
  {"front": "What does .info() do in pandas?", "back": "Gets a concise summary of a DataFrame."},
  {"front": "What is .shape in pandas?", "back": "An attribute that returns the dimensions of a DataFrame."},
  {"front": "What does .columns return in pandas?", "back": "The column labels of a DataFrame."},
  {"front": "What is .index in pandas?", "back": "The index labels of a DataFrame."},
  {"front": "What does .values return in pandas?", "back": "The data as a NumPy array."},
  {"front": "What is Big O notation?", "back": "A notation to describe the performance or complexity of an algorithm."},
  {"front": "What is time complexity?", "back": "The computational complexity that describes the amount of time it takes to run an algorithm."},
  {"front": "What is space complexity?", "back": "The computational complexity that describes the amount of memory space required by an algorithm."},
  {"front": "What does O(1) mean?", "back": "Constant time complexity."},
  {"front": "What is O(n)?", "back": "Linear time complexity."},
  {"front": "What does O(log n) represent?", "back": "Logarithmic time complexity."},
  {"front": "What is O(n^2)?", "back": "Quadratic time complexity."},
  {"front": "What does O(n log n) mean?", "back": "Linearithmic time complexity."},
  {"front": "What is recursion?", "back": "A method where the solution depends on solutions to smaller instances of the same problem."},
  {"front": "What is JSON?", "back": "JavaScript Object Notation, a data interchange format."},
  {"front": "What does .dump() do in JSON?", "back": "Serializes a Python object into a JSON formatted string."},
  {"front": "What is .load() used for in JSON?", "back": "Deserializes a JSON formatted string into a Python object."},
  {"front": "What is polymorphism in Python?", "back": "The ability of different objects to be accessed through the same interface."},
  {"front": "What is inheritance in Python?", "back": "A mechanism where a new class inherits properties and methods from an existing class."},
  {"front": "What is encapsulation?", "back": "The bundling of data with the methods that operate on that data."},
  {"front": "What does a double underscore prefix indicate in Python?", "back": "That the variable is intended for internal use only."},
  {"front": "What is the convention for private methods in Python?", "back": "Prefixing the method name with double underscores."},
  {"front": "What does a single underscore prefix suggest in Python?", "back": "That the variable is intended for use within the class and its subclasses."},
  {"front": "How are protected methods indicated in Python?", "back": "By prefixing the method name with a single underscore."},
  {"front": "What does the total_ordering decorator do?", "back": "It fills in missing ordering methods for a class."},
  {"front": "Does Python have pointers?", "back": "Not explicitly, but variables reference memory locations."}
]